import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "../common";
export declare namespace IERC721Drop {
    type SaleDetailsStruct = {
        publicSaleActive: boolean;
        presaleActive: boolean;
        publicSalePrice: BigNumberish;
        publicSaleStart: BigNumberish;
        publicSaleEnd: BigNumberish;
        presaleStart: BigNumberish;
        presaleEnd: BigNumberish;
        presaleMerkleRoot: BytesLike;
        maxSalePurchasePerAddress: BigNumberish;
        totalMinted: BigNumberish;
        maxSupply: BigNumberish;
    };
    type SaleDetailsStructOutput = [
        boolean,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber
    ] & {
        publicSaleActive: boolean;
        presaleActive: boolean;
        publicSalePrice: BigNumber;
        publicSaleStart: BigNumber;
        publicSaleEnd: BigNumber;
        presaleStart: BigNumber;
        presaleEnd: BigNumber;
        presaleMerkleRoot: string;
        maxSalePurchasePerAddress: BigNumber;
        totalMinted: BigNumber;
        maxSupply: BigNumber;
    };
}
export interface IERC721OnChainDataMockInterface extends utils.Interface {
    functions: {
        "name()": FunctionFragment;
        "saleDetails()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "name" | "saleDetails"): FunctionFragment;
    encodeFunctionData(functionFragment: "name", values?: undefined): string;
    encodeFunctionData(functionFragment: "saleDetails", values?: undefined): string;
    decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "saleDetails", data: BytesLike): Result;
    events: {};
}
export interface IERC721OnChainDataMock extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IERC721OnChainDataMockInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        name(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        saleDetails(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
    };
    name(overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    saleDetails(overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        name(overrides?: CallOverrides): Promise<string>;
        saleDetails(overrides?: CallOverrides): Promise<IERC721Drop.SaleDetailsStructOutput>;
    };
    filters: {};
    estimateGas: {
        name(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        saleDetails(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        name(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        saleDetails(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
    };
}
