import { Signer, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MetadataRenderAdminCheck, MetadataRenderAdminCheckInterface } from "../MetadataRenderAdminCheck";
declare type MetadataRenderAdminCheckConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class MetadataRenderAdminCheck__factory extends ContractFactory {
    constructor(...args: MetadataRenderAdminCheckConstructorParams);
    deploy(overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<MetadataRenderAdminCheck>;
    getDeployTransaction(overrides?: Overrides & {
        from?: string | Promise<string>;
    }): TransactionRequest;
    attach(address: string): MetadataRenderAdminCheck;
    connect(signer: Signer): MetadataRenderAdminCheck__factory;
    static readonly bytecode = "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea2646970667358221220f95acdc9a7a07607174fd26b32178cad4a51baf898f98a790a5240981339ec7764736f6c634300080a0033";
    static readonly abi: {
        inputs: never[];
        name: string;
        type: string;
    }[];
    static createInterface(): MetadataRenderAdminCheckInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): MetadataRenderAdminCheck;
}
export {};
