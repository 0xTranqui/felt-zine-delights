"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("@oclif/command");
const append_to_gitignore_service_1 = require("../services/append-to-gitignore-service");
const warn_if_env_project_does_not_exist_service_1 = require("../services/warn-if-env-project-does-not-exist-service");
const warn_if_env_does_not_exist_service_1 = require("../services/warn-if-env-does-not-exist-service");
const push_service_1 = require("../services/push-service");
const deprecation_service_1 = require("../services/deprecation-service");
class Push extends command_1.Command {
    async run() {
        const { argv, flags } = this.parse(Push);
        new deprecation_service_1.DeprecationService().run('push');
        // 1. create gitignore
        await new append_to_gitignore_service_1.AppendToGitignoreService().run();
        // 2. check if .env.project & .env files exists
        await new warn_if_env_project_does_not_exist_service_1.WarnIfEnvProjectDoesNotExistService({ _this: this }).run();
        await new warn_if_env_does_not_exist_service_1.WarnIfEnvDoesNotExistService({ _this: this, filename: argv[0] }).run();
        // 3. push
        await new push_service_1.PushService(argv[0], flags.dotenv_me || '').run();
    }
}
exports.default = Push;
Push.description = 'push .env';
Push.args = [
    {
        name: 'filename',
        required: false,
        description: 'Set input filename. Defaults to .env for development and .env.{environment} for other environments',
        hidden: false,
    },
];
Push.flags = {
    dotenv_me: command_1.flags.string({
        char: 'm',
        description: 'pass value for .env.me rather than reading from .env.me file',
        hidden: false,
        multiple: false,
        env: 'DOTENV_ME',
        required: false,
    }),
};
