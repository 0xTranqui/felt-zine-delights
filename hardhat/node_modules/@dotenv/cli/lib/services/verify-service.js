"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VerifyService = void 0;
const prompts = require("prompts");
const signale = require("signale");
const dotenv = require("dotenv");
const axios = require('axios');
const vars_1 = require("../vars");
class VerifyService {
    constructor(organizationSlug) {
        this.organizationSlug = organizationSlug;
    }
    async run() {
        const response = await prompts({
            type: 'text',
            name: 'value',
            message: 'What is your email address?',
        });
        signale.await('sending a code.');
        // submit email for identification
        axios(this._initOptions(response.value))
            .then(_response => {
            signale.complete('sent. check your email.');
            this._promptForShortCode();
        })
            .catch(function (error) {
            if (error.response) {
                signale.fatal(error.response.data);
            }
            else {
                signale.fatal(error);
            }
        });
    }
    async _promptForShortCode() {
        const response = await prompts({
            type: 'text',
            name: 'value',
            message: 'What is the code?',
        });
        signale.await('verifying that code.');
        // submit shortCode for verification
        axios(this._verifyOptions(response.value))
            .then(response => {
            signale.success('verified code.');
            signale.log(`\nYou can view your project at ${response.data.data.loginUrl} (url expires in 5 minutes)`);
        })
            .catch(function (error) {
            if (error.response) {
                signale.fatal(error.response.data);
            }
            else {
                signale.fatal(error);
            }
        });
    }
    _initOptions(email) {
        const url = vars_1.vars.apiUrl + '/v1/init';
        const data = {
            organizationSlug: this.organizationSlug,
            email: email,
            projectUid: this._DOTENV_PROJECT,
            meUid: this._DOTENV_ME,
            projectName: this._DOTENV_PROJECT_NAME,
        };
        const options = {
            method: 'POST',
            headers: { 'content-type': 'application/json' },
            data: data,
            url,
        };
        return options;
    }
    _verifyOptions(shortCode) {
        const url = vars_1.vars.apiUrl + '/v1/verify';
        const data = {
            shortCode: shortCode,
            projectUid: this._DOTENV_PROJECT,
            meUid: this._DOTENV_ME,
        };
        const options = {
            method: 'POST',
            headers: { 'content-type': 'application/json' },
            data: data,
            url,
        };
        return options;
    }
    get _envMe() {
        return dotenv.config({ path: '.env.me' });
    }
    get _envProject() {
        return dotenv.config({ path: '.env.project' });
    }
    get _DOTENV_ME() {
        return (this._envMe.parsed || {}).DOTENV_ME;
    }
    get _DOTENV_PROJECT() {
        return (this._envProject.parsed || {}).DOTENV_PROJECT;
    }
    get _DOTENV_PROJECT_NAME() {
        return (this._envProject.parsed || {}).DOTENV_PROJECT_NAME;
    }
}
exports.VerifyService = VerifyService;
